# Decorator Practice: Logging Function Calls
# Create a decorator that logs when a function is called and what arguments it receives. 
# Apply this decorator to multiple functions and observe the logged information.
from typing import Callable
from functools import wraps
import time
import timeit

def logs(func: Callable):
    logs_dict = {}
    @wraps(func)
    def wrapper(*args):
        logs_dict['id'] = hash(f'{time.time()}'+f'{args}')
        logs_dict['id']= {'time':time.time(), 'args':args}
        print(logs_dict)
        return func(*args)
    return wrapper

@logs
def addition1(a,b):
    return sum((a,b))

# print(addition1(1,2))

# Decorator Practice: Execution Time Measurement
# Implement a decorator that measures and prints the execution time of a function. 
# Use it to time different functions and analyze their performance.

import timeit

def execution_time_decorator(func):
    def wrapper(*args, **kwargs):
        start_time = timeit.default_timer()  # Get the start time
        result = func(*args, **kwargs)  # Call the original function
        end_time = timeit.default_timer()  # Get the end time
        execution_time = end_time - start_time  # Calculate execution time
        print(f"{func.__name__} took {execution_time} seconds to execute.")
        return result
    return wrapper

# Example usage of the decorator
@execution_time_decorator
def add(num):
    result = 0
    for i in range(num):
        result += i
    return result

@execution_time_decorator
def multiply(num):
    result = 1
    for i in range(1, num + 1):
        result *= i
    return result

# Call the decorated functions
# add(1000)
# multiply(1000)

# Decorator Practice: Argument Validation
# Write a decorator that validates the arguments passed to a function based on specific 
# criteria (e.g., checking if all arguments are positive integers). Apply this decorator 
# to functions and handle invalid arguments gracefully.

def validate_int_args(func: Callable): 
    def wrapper(*args):
        try:
            if not all(list(map(lambda x: x == abs(int(x)), args))):
                raise ValueError('Not all arguments are positive integers.')
        except ValueError as e:
            print(f'Error: {e}')
        
        return func(*args)
    return wrapper

@validate_int_args
def add_nums(*args):
    return sum(args)

add_nums(1,2,3,4,5,6,7,8,9)

# üìå–°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é-–∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞: 
# ‚óã –æ—Ç 1 –¥–æ 100 –¥–ª—è –∑–∞–≥–∞–¥—ã–≤–∞–Ω–∏—è, ‚óã –æ—Ç 1 –¥–æ 10 –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ 
# üìå–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–æ—Å–∏—Ç —É–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ 
# —á–∏—Å–ª–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫.
import random

def guess():
    num = random.randint(1,100)
    num_of_guesses = random.randint(1,10)
    def guess_num():
        nonlocal num_of_guesses, num
        while num_of_guesses:
            guessed_num = int(input('Guess num: '))
            if num == guessed_num:
                print('You guessed correctly!')
                break
            elif num < guessed_num:
                print(f'Incorrect. The number is lower. {num_of_guesses} guesses left.')
                num_of_guesses-=1
            elif num > guessed_num:
                print(f'Incorrect. The number is higher. {num_of_guesses} guesses left.')
                num_of_guesses-=1
        else:   
                print(f'You ran out of guesses! The correct number is {num} ')
            
    return guess_num()

# üìå–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ json —Ñ–∞–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ 
# –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, 
# –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è. üìå–ö–∞–∂–¥—ã–π –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á json 
# —Å–ª–æ–≤–∞—Ä—è. üìå–î–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ, 
# —Ç–∞–∫ –∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. üìå–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.  
import json
import os
def json_decor(func:Callable):
    def wrapper(*args, **kwargs):
        result = func(*args,**kwargs)
        func_name = func.__name__

        if os.path.isfile(f'{func_name}.json') and os.path.exists(f'{func_name}.json'):
            with open(f'{func_name}.json', 'r+', encoding='utf-8') as json_f:
                dict_ = json.load(json_f)
        else:
            dict_ = {}
        # try:
        #     with open(f'{func_name}.json', 'r+', encoding='utf-8') as json_f:
        #             dict_ = json.load(json_f)

        # except FileNotFoundError:
        #         dict_ = {}
        print(dict_)
        if args:
                dict_[f'{result}'] = args
                
        if kwargs:
                dict_[f'{result}'] = kwargs
        
        with open(f'{func_name}.json', 'w', encoding='utf-8') as json_f:
            json.dump(dict_, json_f, ensure_ascii=False, indent=2)
    
    return wrapper

# üìå–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–¥–∞—á. 
# üìå–§—É–Ω–∫—Ü–∏—é —É–≥–∞–¥–∞–π–∫—É –∑–∞–¥–µ–∫–æ—Ä–∏—Ä—É–π—Ç–µ: ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, 
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∏ ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞. 
# üìå–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.
def run_times(count:int):
    def decor(func:Callable):
        print(func)
        def wrapper(*args):
            for _ in range(count):
                func(*args)
        return wrapper
    return decor

# üìå–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 1. üìå–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä. 
# üìå–û–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥—è—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é—É–≥–∞–¥–∞–π–∫—É —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã [1, 100] 
# –∏ [1, 10]. üìå–ï—Å–ª–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç, –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.

def check_num_args(func: Callable):
    def wrapper(*args):
        try:
            a, b, *_ = args
            if a not in range(1,101):
                raise ValueError('First argument should be between 1-100. Random int selected.')
            elif b not in range(1,11):
                raise ValueError('Second argument should be between 1-10. Random int selected.')
        except ValueError as e:
            print(f'Error: {e}')
            a = random.randint(1,100)
            b = random.randint(1,10)
            return func(a,b)
        return func(*args)
    return wrapper

@json_decor
@run_times(3)
@check_num_args
def guess2(num, num_of_guesses):
    def guess_num2():
        nonlocal num_of_guesses, num
        while num_of_guesses:
            guessed_num = int(input('Guess num: '))
            if num == guessed_num:
                print('You guessed correctly!')
                return True
            elif num < guessed_num:
                num_of_guesses-=1
                print(f'Incorrect. The number is lower. {num_of_guesses} guesses left.')
            elif num > guessed_num:
                num_of_guesses-=1
                print(f'Incorrect. The number is higher. {num_of_guesses} guesses left.')
        else:   
                print(f'You ran out of guesses! The correct number is {num} ')
                return False
            
    return guess_num2()

guess2(100, 5)

@json_decor
def calculate_total(**kwargs):
    total = 0
    for product_name, value in kwargs.items():
        total += value
    return total

calculate_total(product1=125.0, product2=155.5, product3=77.25)

@json_decor
def add1(num):
    result = 0
    for i in range(num):
        result += i
    return result

add1(55)
